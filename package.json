{
    "name": "wit-idl",
    "displayName": "WIT IDL",
    "description": "WebAssembly Interface Type (WIT) IDL Extension for VSCode",
    "private": true,
    "version": "0.3.15",
    "publisher": "bytecodealliance",
    "icon": "images/wit-icon.png",
    "categories": [
        "Programming Languages",
        "Snippets"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/bytecodealliance/vscode-wit.git"
    },
    "license": "Apache-2.0 WITH LLVM-exception",
    "engines": {
        "vscode": "^1.101.0"
    },
    "type": "module",
    "main": "./dist/extension.js",
    "scripts": {
        "clean": "rimraf out dist types && rimraf --glob \"*.vsix\"",
        "clean-wasm": "rimraf wit-bindgen-wasm/pkg wit-bindgen-wasm/target",
        "clean-deps": "rimraf node_modules package-lock.json",
        "clean-all": "npm run clean && npm run clean-wasm",
        "clean-full": "npm run clean-all && npm run clean-deps",
        "setup-wasm": "./scripts/setup-wasm.sh",
        "install-extension": "npm run package && code --install-extension wit-idl.vsix",
        "update-snapshot": "vscode-tmgrammar-snap --updateSnapshot --scope \"source.wit\" \"tests/grammar/integration/*\"",
        "test-grammar": "vscode-tmgrammar-test -c --grammar syntaxes/wit.tmLanguage.json \"tests/grammar/unit/*\"",
        "test-unit": "vitest run",
        "test-unit-watch": "vitest",
        "test-unit-ui": "vitest --ui",
        "test-build-resources": "vitest run tests/build-resources.test.ts",
        "test-navigator-polyfill": "vitest run tests/navigator-polyfill.test.ts",
        "gen-types": "tsc --project tsconfig.json --emitDeclarationOnly",
        "gen-watch": "npm run gen-types -- -w",
        "build-wasm-prod": "cd wit-bindgen-wasm && wasm-pack build --target web --out-dir pkg --release",
        "build-wasm": "cd wit-bindgen-wasm && wasm-pack build --target web --out-dir pkg",
        "build-extension-prod": "node esbuild.mjs -- --production",
        "build-extension": "node esbuild.mjs",
        "build-extension-watch": "node esbuild.mjs --watch",
        "build": "run-s build-wasm build-extension",
        "vscode:prepublish": "run-s build-wasm-prod build-extension-prod",
        "package": "vsce package -o wit-idl.vsix",
        "fmt": "prettier . --write",
        "fmt-check": "prettier --check .",
        "lint": "eslint src --ext ts ./*.mjs",
        "lint-fix": "eslint src --ext ts ./*.mjs --fix",
        "test": "run-s lint fmt-check build package test-grammar test-unit",
        "test-wasm": "cd wit-bindgen-wasm && cargo test",
        "check-wasm": "cd wit-bindgen-wasm && cargo check",
        "verify-wasm": "node -e \"console.log('Verifying WASM build...'); const fs = require('fs'); const path = 'wit-bindgen-wasm/pkg/wit_bindgen_wasm_bg.wasm'; if (fs.existsSync(path)) { console.log('✅ WASM file exists:', path); const size = Math.round(fs.statSync(path).size / 1024); console.log('📏 Size:', size, 'KB'); try { const fd = fs.openSync(path, 'r'); const header = Buffer.alloc(8); fs.readSync(fd, header, 0, 8, 0); fs.closeSync(fd); const magicOk = header[0] === 0x00 && header[1] === 0x61 && header[2] === 0x73 && header[3] === 0x6D; if (!magicOk) { console.warn('⚠️ Not a WebAssembly binary (bad magic).'); process.exit(1); } const version = header.readUInt32LE(4); if (version === 1) { console.log('🧩 Type: Core WebAssembly module (vanilla wasm)'); } else if (version === 0x0A) { console.log('🧩 Type: WebAssembly component'); } else { console.log('🧩 Type: Unknown/other (version ' + version + ')'); } } catch (e) { console.error('❌ Error reading header:', e.message); process.exit(1); } } else { console.error('❌ WASM file not found:', path); process.exit(1); }\"",
        "dev": "run-p gen-watch build-extension-watch",
        "publish": "vsce publish",
        "release": "npx release-please release-pr --repo-url bytecodealliance/vscode-wit --config-file .github/release-please-config.json --manifest-file .github/release-please-manifest.json --token",
        "update-npm": "npx npm-check-updates -u -t minor",
        "update-cargo": "cd wit-bindgen-wasm && cargo update && (command -v cargo-upgrade >/dev/null 2>&1 || cargo install cargo-edit) && cargo upgrade",
        "update-cargo-major": "cd wit-bindgen-wasm && cargo update && (command -v cargo-upgrade >/dev/null 2>&1 || cargo install cargo-edit) && cargo upgrade --incompatible",
        "update": "run-s update-npm update-cargo",
        "update-major-npm": "npx npm-check-updates -u",
        "update-major": "run-s update-major-npm update-cargo-major"
    },
    "dependencies": {
        "wit-bindgen-wasm": "file:wit-bindgen-wasm/pkg"
    },
    "devDependencies": {
        "@eslint/css": "0.11.0",
        "@eslint/js": "9.35.0",
        "@eslint/markdown": "7.2.0",
        "@types/node": "24.3.1",
        "@types/vscode": "1.101.0",
        "@typescript-eslint/parser": "8.43.0",
        "@vitest/ui": "3.2.4",
        "@vscode/vsce": "3.6.0",
        "esbuild": "0.25.9",
        "esbuild-node-externals": "1.18.0",
        "eslint": "9.35.0",
        "eslint-plugin-prettier": "5.5.4",
        "globals": "16.4.0",
        "npm-run-all": "4.1.5",
        "prettier": "3.6.2",
        "rimraf": "6.0.1",
        "typescript": "5.9.2",
        "typescript-eslint": "8.43.0",
        "vitest": "3.2.4",
        "vscode-tmgrammar-test": "0.1.3",
        "wasm-pack": "0.13.1"
    },
    "contributes": {
        "colors": [
            {
                "id": "witIdl.componentColor",
                "description": "Color used to decorate WebAssembly component files (.wasm) in the explorer",
                "defaults": {
                    "light": "#5043b3",
                    "dark": "#7c5eff",
                    "highContrast": "#b15eff"
                }
            }
        ],
        "languages": [
            {
                "id": "wit",
                "aliases": [
                    "WIT",
                    "wit",
                    "WebAssembly Interface Type"
                ],
                "extensions": [
                    ".wit"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "wit",
                "scopeName": "source.wit",
                "path": "./syntaxes/wit.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "wit",
                "path": "./snippets.json"
            }
        ],
        "commands": [
            {
                "command": "wit-idl.syntaxCheck",
                "title": "Check WIT Syntax",
                "category": "WIT"
            },
            {
                "command": "wit-idl.syntaxCheckWorkspace",
                "title": "Check WIT Syntax in Workspace",
                "category": "WIT"
            },
            {
                "command": "wit-idl.showVersion",
                "title": "Show WIT Bindgen Version",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindings",
                "title": "Generate Language Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindingsRust",
                "title": "Generate Rust Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindingsC",
                "title": "Generate C Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindingsCSharp",
                "title": "Generate C# Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindingsGo",
                "title": "Generate Go Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.generateBindingsMoonBit",
                "title": "Generate MoonBit Bindings",
                "category": "WIT"
            },
            {
                "command": "wit-idl.extractWit",
                "title": "Extract WIT",
                "category": "WIT"
            },
            {
                "command": "wit-idl.extractCoreWasm",
                "title": "Extract Core Wasm",
                "category": "WIT"
            },
            {
                "command": "wit-idl.formatDocument",
                "title": "Format Document",
                "category": "WIT"
            }
        ],
        "submenus": [
            {
                "id": "wit-idl.generateBindings.submenu",
                "label": "Generate Bindings"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "command": "wit-idl.syntaxCheck",
                    "when": "resourceExtname == .wit",
                    "group": "navigation"
                },
                {
                    "command": "wit-idl.formatDocument",
                    "when": "resourceExtname == .wit",
                    "group": "1_modification@10"
                },
                {
                    "submenu": "wit-idl.generateBindings.submenu",
                    "when": "resourceExtname == .wit || witIdl.isWasmComponent",
                    "group": "navigation@12"
                },
                {
                    "command": "wit-idl.extractWit",
                    "when": "resourceExtname == .wasm && witIdl.isWasmComponent",
                    "group": "navigation@10"
                },
                {
                    "command": "wit-idl.extractCoreWasm",
                    "when": "resourceExtname == .wasm && witIdl.isWasmComponent",
                    "group": "navigation@11"
                }
            ],
            "explorer/context": [
                {
                    "command": "wit-idl.syntaxCheck",
                    "when": "resourceExtname == .wit",
                    "group": "4_witIdl@10"
                },
                {
                    "command": "wit-idl.extractWit",
                    "when": "resourceExtname == .wasm && witIdl.isWasmComponent",
                    "group": "4_witIdl@11"
                },
                {
                    "command": "wit-idl.extractCoreWasm",
                    "when": "resourceExtname == .wasm && witIdl.isWasmComponent",
                    "group": "4_witIdl@12"
                },
                {
                    "submenu": "wit-idl.generateBindings.submenu",
                    "when": "resourceExtname == .wit || witIdl.isWasmComponent",
                    "group": "4_witIdl@13"
                }
            ],
            "wit-idl.generateBindings.submenu": [
                {
                    "command": "wit-idl.generateBindingsRust"
                },
                {
                    "command": "wit-idl.generateBindingsC"
                },
                {
                    "command": "wit-idl.generateBindingsCSharp"
                },
                {
                    "command": "wit-idl.generateBindingsGo"
                },
                {
                    "command": "wit-idl.generateBindingsMoonBit"
                }
            ],
            "commandPalette": [
                {
                    "command": "wit-idl.syntaxCheck",
                    "when": "editorLangId == wit"
                },
                {
                    "command": "wit-idl.syntaxCheckWorkspace"
                },
                {
                    "command": "wit-idl.showVersion"
                },
                {
                    "command": "wit-idl.generateBindingsRust",
                    "when": "editorLangId == wit || witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.generateBindingsC",
                    "when": "editorLangId == wit || witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.generateBindingsCSharp",
                    "when": "editorLangId == wit || witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.generateBindingsGo",
                    "when": "editorLangId == wit || witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.generateBindingsMoonBit",
                    "when": "editorLangId == wit || witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.extractWit",
                    "when": "witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.extractCoreWasm",
                    "when": "witIdl.isWasmComponent"
                },
                {
                    "command": "wit-idl.formatDocument",
                    "when": "editorLangId == wit"
                }
            ]
        },
        "keybindings": [
            {
                "command": "wit-idl.syntaxCheck",
                "key": "f7",
                "when": "editorTextFocus && editorLangId == wit"
            },
            {
                "command": "wit-idl.syntaxCheckWorkspace",
                "key": "shift+f7"
            },
            {
                "command": "wit-idl.formatDocument",
                "key": "shift+alt+f",
                "when": "editorTextFocus && editorLangId == wit"
            }
        ],
        "customEditors": [
            {
                "viewType": "wit-idl.wasmToWit",
                "displayName": "WIT from WebAssembly Component",
                "selector": [
                    {
                        "filenamePattern": "**/*.wasm"
                    }
                ],
                "priority": "default"
            }
        ],
        "configurationDefaults": {
            "[wit]": {
                "editor.defaultFormatter": "bytecodealliance.wit-idl"
            }
        }
    }
}
